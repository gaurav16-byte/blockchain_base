#IMPORT NECESSARY MODULES
from random import randint
import functions
import hashlib
import socket
import os
'''
???????????????????????????????
???????????????????????????????
???????????REDACTED????????????
???????????????????????????????
???????????????????????????????
'''
def new_node():
    path = os.getcwd()
    os.chdir(path)  
    #TO CREATE THE BLOCKS FOLDER
    functions.folder()
    #TO GENERATE UUID OF THE USER
    uid = hashlib.sha256(functions.mobo().encode('utf-8')).hexdigest()
    #TO GET THE IP ADDRESS FOR P2P CONNECTION
    ip = functions.get_internal_ip()
    #SELECT A RANDOM PORT THAT WILL ALLOW TO LISTEN AND BIND CONNECT
    port = randint(1025, 65535)
    #SET USERNAME AS ROOT FOR THE ROOT NODE
    user = functions.username()
    #GENERATE AN RSA KEY PAIR, SERIALIZED THEM INTO PEM FORMAT
    public_key_pem, private_key_pem = functions.asymmetric()
    #SHA256 HASH OF THE PUBLIC KEY
    public_hash = hashlib.sha256(public_key_pem).hexdigest()
    #TO STORE THE PUBLIC KEY
    functions.store_public_in_pem(public_key_pem)
    #TO STORE THE PRIVATE KEY
'''
???????????????????????????????
???????????????????????????????
???????????REDACTED????????????
???????????????????????????????
???????????????????????????????
'''
    
    #ADD VALUES TO THE DATABASE
    functions.to_peer(uid, user, public_hash, ip, port)
    x = functions.details('root')
    public_hash_receiver = x[2]
    ip_receiver = x[3]
    port_receiver = x[4]
    client_socket = functions.start_client(ip_receiver, port_receiver)
    functions.send_file(client_socket, path + '\\peer_table.db')
    time.sleep(0.5)
    functions.send_file(client_socket, path + '\\' + public_hash + '.pem')
    functions.send_message(client_socket, public_hash_receiver, 'exit')
    print(f'#### {user} NODE ####')
    print(f'[+]{ip}')
    functions.start_server(user, current_block, port, block_hash)
    
def old_node(user, public_hash, host, port, block_hash):
    global current_block
    #TO READ THE PRIVATE KEY
    private_key_pem = functions.read_private()
    #TO LOAD PRIVATE KEY FROM .PEM FORMAT
    private_key = functions.load_private_from_pem(private_key_pem)
    #TO GET BLOCK VALUE
    files = os.listdir(path + "\\blocks\\")
    for i in range(len(files)):
        files[i] = int(files[i][:files[i].find('.')])
    current_block = files[-1]
'''
???????????????????????????????
???????????????????????????????
???????????REDACTED????????????
???????????????????????????????
???????????????????????????????
'''


#TO SET THE ROOT PATH AS CURRENT FOLDER
path = os.getcwd()
os.chdir(path)

uid = hashlib.sha256(functions.mobo().encode('utf-8')).hexdigest()

uuids = []
conn = sqlite3.connect('peer_table.db')
cur = conn.cursor()
for i in cur.execute('SELECT uuid FROM NODES'):
    uuids.append(i[0])
if uid in uuids:
    for i in cur.execute(f'SELECT * FROM NODES WHERE uuid="{uid}"'):
        user = i
    conn.close()
    detail = functions.details(user[1])
    user = detail[1]
    public_hash = detail[2]
    host = detail[3]
    port = detail[4]
'''
???????????????????????????????
???????????????????????????????
???????????REDACTED????????????
???????????????????????????????
???????????????????????????????
'''
        hashes.append(i[0])
    block_hash = hashes[-1]
        
    old_node(user, public_hash, host, port, block_hash)
else:
    new_node()
